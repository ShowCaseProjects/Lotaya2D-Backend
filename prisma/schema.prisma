// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output="./lotaya_wallet"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_DATABASE_URL")
}

model Users{
  user_internal_id   String    @id         @db.VarChar(26)
  phone_number       String    @unique     @db.VarChar(13)
  user_name          String?               @db.VarChar(30)
  password           String?            
  otp_code           String?               @db.VarChar(6)                
  role_id            Int    
  sms_send_time      DateTime?
  user_role          Roles                 @relation(fields:[role_id],references:[role_id])
  is_verify          Int ?               
  account_status     Int ?
  delete_status      Int              
  register_date      DateTime              @default(now())
  updated_date       DateTime              @default(now())
  deleted_date       DateTime?
  withdrawaccount    UserWithdrawAccount[]
  wallet             Wallet[]
  payment            Payment[]
  withdraw           Withdraw[]
  transation         Transaction[]

  @@map("users")
}

model Roles{
  role_id            Int            @id
  name               String         @unique   @db.VarChar(100)
  users              Users[]

  @@map("roles")
}

model UserWithdrawAccount{
  user_withdraw_account_id      String         @id          @db.VarChar(26)
  user_internal_id              String 
  user                          Users                       @relation(fields:[user_internal_id],references:[user_internal_id])        
  account_type                  String            
  account_name                  String 
  account_id                    Int            @unique 
  delete_status                 Int          
  register_date                 DateTime       @default(now())
  updated_date                  DateTime       @default(now())
  deleted_date                  DateTime?
  withdraw                      Withdraw[]

  @@map("userwithdrawaccount")
}

model AdminReceiverAccount{
  admin_receiver_account_id           String     @id          @db.VarChar(26)    
  admin_account_type                  String            
  admin_account_name                  String 
  admin_account_id                    String     @unique      @db.VarChar(13)
  status                              Int?
  delete_status                       Int          
  register_date                       DateTime                @default(now())
  updated_date                        DateTime                @default(now())
  deleted_date                        DateTime?
  payment                             Payment[]
  @@map("adminreceiveraccount")
}

model Wallet{
  wallet_id               String     @id           @db.VarChar(26)
  user_internal_id        String     @unique 
  user                    Users                    @relation(fields:[user_internal_id],references:[user_internal_id])       
  game_amount             Decimal?            
  main_amount             Decimal?
  delete_status           Int               
  register_date           DateTime                 @default(now())
  updated_date            DateTime                 @default(now())
  deleted_date            DateTime?

  @@map("wallet")
}


model Payment{
  payment_internal_id       String    @id          @db.VarChar(26)
  user_internal_id           String 
  user                       Users                 @relation(fields:[user_internal_id],references:[user_internal_id]) 
  admin_internal_id          String?
  admin                      Admin ?               @relation(fields:[admin_internal_id],references:[admin_internal_id])            
  payment_type               String 
  payment_account_name       String
  payment_account            String
  admin_receiver_account_id  String?
  admin_receiver_account     AdminReceiverAccount? @relation(fields:[admin_receiver_account_id],references:[admin_receiver_account_id]) 
  amount                     Decimal 
  date                       DateTime
  approve_reject             Int
  reason_for_reject          String?
  payment_confirm_code       Int 
  delete_status              Int              
  register_date              DateTime              @default(now())
  updated_date               DateTime              @default(now())
  deleted_date               DateTime?

  @@map("payment")
}

model Withdraw{
  withdraw_id               String     @id        @db.VarChar(26)
  user_internal_id          String
  user                      Users                 @relation(fields:[user_internal_id],references:[user_internal_id])  
  admin_internal_id         String?
  admin                     Admin ?               @relation(fields:[admin_internal_id],references:[admin_internal_id]) 
  user_withdraw_account_id  String
  withdrawaccount           UserWithdrawAccount   @relation(fields:[user_withdraw_account_id],references:[user_withdraw_account_id])            
  amount                    Decimal 
  date                      DateTime
  withdraw_confirm_code     String?               @db.VarChar(6)
  is_verify                 Int ?  
  approve_reject            Int
  reason_for_reject         String?
  delete_status             Int
  register_date             DateTime              @default(now())
  updated_date              DateTime              @default(now())
  deleted_date              DateTime?

  @@map("withdraw")
}

model Admin{
  admin_internal_id         String     @id         @db.VarChar(26)
  admin_id                  String     @unique     @db.VarChar(13)
  admin_name                String?                @db.VarChar(30)
  password                  String?                  
  role_id                   Int    
  admin_role                AdminRoles             @relation(fields:[role_id],references:[role_id])             
  account_status            String ?               @db.VarChar(1)   
  delete_status             Int ?            
  register_date             DateTime               @default(now())
  updated_date              DateTime               @default(now())
  deleted_date              DateTime?
  payment                   Payment[]
  withdraw                  Withdraw[]

  @@map("admin")
}

model AdminRoles{
  role_id        Int         @id
  name           String      @unique @db.VarChar(100)
  admins         Admin[]

  @@map("adminroles")
}

model  Transaction{
  transaction_id         String    @id       @db.VarChar(26)
  user_internal_id       String
  user                   Users               @relation(fields:[user_internal_id],references:[user_internal_id])  
  amount                 Decimal
  transaction_type_id    Int
  transaction_type       TransactionType     @relation(fields:[transaction_type_id],references:[transaction_type_id]) 
  transaction_date       DateTime  
  delete_status          Int             
  register_date          DateTime            @default(now())
  updated_date           DateTime            @default(now())
  deleted_date           DateTime?

  @@map("transation")  
}

model  TransactionType {
transaction_type_id  Int            @id
transaction_type     String         @unique @db.VarChar(100)
transation           Transaction[]

@@map("transationtype")
}

model  ApproveReject {
approve_reject_type_id  Int      @id
type                    String   @unique @db.VarChar(100)

@@map("approve_reject")
}